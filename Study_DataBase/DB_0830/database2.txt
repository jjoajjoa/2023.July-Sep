문자 함수
CONCAT(str1, str2) : 문자열 두개 연결
LENGTH(str) : 문자열 길이 반환
LOWER(str) : 문자열 소문자로 변환
UPPER(str) : 문자열 대문자로 변환
SUBSTR(str, start, length) : 문자열을 start부터 자르는데 length개 자른다. SUBSTR('substring', 2, 4) : ubst
REPLACE(str, str_to_replace, replace_str) : 문자열에서 str_to_replace라는 문자열을 replace_str으로 바꿔준다.
INSTR(string, substring, start, n) : 문자열에서 substring이라는 문자가 어디있는지 찾는다. start : 찾기 시작할 위치, n : 몇 번째
TRIM([LEADING|TRAILING|BOTH] char from str) : 문자열에서 char를 양쪽에서 제거해준다.
LEADING : 앞쪽
TRAILING : 뒤쪽
BOTH : 양쪽
LPAD, RPAD(str, length, char) : 문자열 length사이즈만큼 채워준다. 남는 부분에는 char를 채워준다.
LPAD("Oracle", 10, '#') : ####Oracle
RPAD("Oracle", 10, '#') : Oracle####

숫자 함수
ABS(n) : 절대값 반환
CEIL(n) : 올림한 정수
FLOOR(n) : 내림한 정수
ROUND(n,m) : 소수점 자리 m 번째에서 반올림
MOD(n1, n2) : n1을 n2로 나눈 나머지
POWER(n1, n2) : n1을 n2만큼 제곱한다. n1**n2
SQRT(n) : 제곱근 반환
EXP(n) : 자연로그 제곱근 반환
LN(n), LOG(10,n) : 로그값 계산
SIN(n), COS(n), TAN(n) : 삼각함수 값 반환

날짜 함수
SYSDATE : 현재 시스템 날짜와 시간을 반환
CURRENT_DATE : 현재 날짜와 시간을 반환
EXTRACT(field FROM source) : soure에서 field(YEAR, MONTH, DAY 등)을 추출해서 반환한다.
TO_DATE(str, format) : 문자열을 format(YYYY/MM/DD, DD/MM/YYYY, DD.MM.YYYY 등) 형식으로 DATE형으로 반환한다.
TO_CHAR(date, format) : 날짜값을 format형식 문자열로 반환한다.
ADD_MONTHS(date, interger) : 날짜값에 interger만큼 개월을 더해서 반환한다.
MONTHS_BETWEEN(date1, date2) : date1, date2 사이 개월 수를 반환한다.
LAST_DAY(date) : 해당 일자가 속한 달의 마지막 날짜를 반환
NEXT_DAY(date, day_of_week) : 입력한 일자 다음에 오늘 요일을 반환해준다.

 -- 사원 이름이 5글자 이상인 애들 출력
 -- JOB을 3글자까지만 출력
 -- A가 들어간 직업 % 안쓰고 출력

형 변환 함수
TO_CHAR : 숫자 또는 날짜를 문자열로 반환
SELECT TO_CHAR(12345) FROM DUAL;
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD') FROM DUAL

TO_NUMBER : 문자열을 숫자로 반환
SELECT TO_NUMBER('12345') FROM DUAL

TO_DATE : 문자열을 날짜로 반환
TO_TIMESTAMP : 문자열을 TIMESTAMP 값으로 반환 2023-08-30 오후 02:41:32
SELECT TO_TIMESTAMP('2023-08-30 오후 02:41:32', 'YYYY-MM-DD HH24:MI:SS') FROM DUAL;

CAST : 한 데이터 타입을 다른 데이터 타입으로 변경
SELECT CAST(column AS DATATYPE(LENGTH)) FROM TABLE

오라클에서는 암묵적으로 형변환이 가능하다. 근데 원하는 결과가 나오지 않을 수 있으니 명시적 형변환 권장된다.

NULL 함수 - NULL값을 처리하는 함수
NVL(값1, 값2) - 값1이 NULL이면 값2를 반환하고, 아니면 값1을 반환
NVL2(값1, 값2, 값3) - 값1이 NULL이면 값3를 반환하고, 아니면 값2를 반환한다.
COALESCE(값1, 값2, 값3, ...): 모든 애들이 NULL일 경우 NULL 반환, NOT NULL인 첫번째 값을 반환한다.
NULLIF(EXP1, EXP2): 두 값이 같으면 NULL 아니면 EXP1을 반환한다.
DECODE(값 또는 열, IF 값 또는 조건식 = A THEN B, IF 값 또는 조건식 = C THEN D, IF 값 또는 조건식 = E THEN F, ...)
SELECT EMPNO, ENAME, JOB, SAL, DECODE(JOB, 'MANAGER', SAL*1.1, 'SALESMAN', SAL*1.05, 'ANALYST', SAL*1.3, SAL) AS NEW_SAL
FROM EMP;

집계 함수(AGGREGATION FUNCTION), 그룹함수(GROUP FUNCTION) 다중행 함수
COUNT(*) : 테이블의 행 개수를 반환
SUM(column) : 해당 column의 모든 값의 합계를 반환
AVG(column) : 해당 column의 모든 값의 평균을 반환
MAX(column) : 해당 column의 가장 큰 값을 반환
MIN(column) : 해당 column의 가장 작은 값을 반환
그룹함수는 그룹단위로 작업을 한다. 집계된 결과를 반환하는 함수다. 그룹 함수는 여러행을 하나의 결과로 집계하여 정보를 나타내는 함수다.
SELECT 문에서 사용되며 단일 작업을 해야하는 요소들과 함께 사용할 수 없다.

GROUP_CONCAT, LISTAGG : 특정 그룹에 한 개 이상의 연결된 문자열을 생성하고 싶을 때
JOB에서 어떤 직업들이 있어? SALESMAN, CLERK, MANAGER ...
GROUP_CONCAT(JOB SEPARATOR ',')
STDDEV, VARIANCE: 표준편차와 분산 결과를 반환

추가 수당 '해당 사항 없음', '해당 사항 있음'
MANAGER 급여 합계
30번 부서 인원 수
제일 오래된 인원과 입사동기들 (같은 해 입사) 출력

CASE문
조건에 따라 다른 동작을 수행하거나 반환한다.
WHEN 조건 THEN 결과

SELECT ENAME,
CASE
WHEN DEPT = 'IT' THEN 'IT DEPARTMENT'
WHEN DEPT = 'SALES' THEN 'SALES DEPARTMENT'
ELSE 'OTHER DEPARTMENTS'
END AS DEPARTMENT, SAL
FROM EMP;

같은 직업이 3명 이상인 JOB을 출력

고급 그룹화 연산 함수
GROUP BY를 도와주는 함수들(HAVING이랑 같은 포지션)

1. ROLLUP
GROUP BY 절에 지정된 열 목록에 대해서 서브 그룹, 각 열에 대한 합계를 생성해준다.
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY (DEPTNO, JOB)
-> DEPT & JOB 기준으로 합계를 생성해준다.

SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB)
-> DEPT & JOB 기준 합계, 전체 그룹, DEPTNO 그룹 합계

2. CUBE
GROUP BY 절에 지정된 열 목록에 대해서 서브 그룹, 각 열에 대한 합계를 생성해준다. 다차원 분석 쿼리에 유리하다.
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB)
-> DEPT & JOB 기준 합계, 전체 그룹, DEPTNO, JOB 그룹 합계

3. GROUPING SETS
GROUP BY 절에 지정된 열 목록에 대해서 서브 그룹, 각 열에 대한 합계를 생성해준다. 복잡한 그룹화에서 사용된다.
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY GROUPING SETS((DEPTNO), (JOB))

GROUPING
직접적으로 합계를 생성해주는 함수는 아니고, 그룹 함수들을 도와주는 함수다.
SELECT DEPTNO, JOB, SUM(SAL), GROUPING(DEPTNO), GROUPING(JOB)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB)

집계된 결과에 대해서 1의 값을 가지고, 그렇지 않은 값에 대해서 0의 값을 가진다.


추가 수당 '해당 사항 없음', '추가 수당 없음', '추가 수당 xx'
EMP 테이블과 DEPT 테이블에서 공통으로 있는 부서번호 출력
연도별 부서별 인원수
각 부서별, 직업별, 그룹화된 부서 + 각 직업별, 전체 인원수, 급여 총액 (그룹화된 부서 : GROUP_DEPT, 그룹화된 직업 : GROUP_JOB)
